{"version":3,"sources":["functions/bch2.js","config.js","screens/bchwallet.js","App.js","reportWebVitals.js","index.js"],"names":["BCHJS","require","BITBOX","toSatoshis","amount","BigNumber","multipliedBy","sendBch","SEND_ADDR","RECV_ADDR","Amount","bala","SEND_MNEMONIC","NETWORK","IS_DEV","bchjs","restURL","getBchAccountBalance","balance","AMT","console","log","c","process","exit","Mnemonic","toSeed","rootSeed","masterHDNode","HDNode","fromSeed","account","derivePath","cashAcc","toCashAddress","Electrumx","utxo","utxos","length","Error","transactionBuilder","TransactionBuilder","satoshisToSend","sendAmount","inputs","map","e","thisUtxo","push","value","addInput","tx_hash","tx_pos","getFee","feeOptions","txFee","safe","addOutput","changeAddrFromMnemonic","change","keyPair","toKeyPair","forEach","input","index","sign","hashTypes","SIGHASH_ALL","tx","build","hex","toHex","RawTransactions","sendRawTransaction","txidStr","account_address","JSON","stringify","toBCH","confirmed","mnemonic","bitbox","dividedBy","Promise","resolve","reject","undefined","avg","fast","byteCount","BitcoinCash","getByteCount","P2PKH","fee","Math","floor","plus","toNumber","module","exports","network","isDev","Bchwallet","useState","raddress","setRaddress","saddress","setSaddress","setAmount","setBalance","mnemonics","setMnemonic","maxAmt","setMaxAmt","useEffect","getBalance","toString","err","Swal","fire","title","text","message","icon","handleSend","amount_to_transfer_trimmed","String","parseFloat","toFixed","bal","selbal","preventDefault","txid","html","document","getElementById","reset","Wrapper","FormWrapper","Card","border","style","width","Body","Title","Text","ListGroup","className","Form","id","FormControl","Control","type","placeholder","size","name","onChange","target","Item","ButtonSend","variant","onClick","marginBottom","ButtonControl","styled","div","Button","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.1f066223.chunk.js","sourcesContent":["import { IS_DEV } from \"../config\";\nimport BigNumber from \"bignumber.js\";\nconst BCHJS = require(\"@psf/bch-js\");\nconst BITBOX = require(\"bitbox-sdk\").BITBOX;\n\nexport const toSatoshis = (amount) => {\n  return new BigNumber(amount).multipliedBy(1e8);\n};\nexport async function sendBch(\n  SEND_ADDR,\n  RECV_ADDR,\n  Amount,\n  bala,\n  SEND_MNEMONIC,\n  // txnCost\n) {\n  try {\n    const NETWORK = IS_DEV ? \"testnet\" : \"mainnet\";\n    let bchjs = new BCHJS({ restURL: IS_DEV ? \"https://testnet3.fullstack.cash/v5/\" : \"https://bchn.fullstack.cash/v5/\" });\n    // Get the balance of the sending address.\n    const balance = await getBchAccountBalance(SEND_ADDR, false);\n    let AMT = toSatoshis(Amount);\n    console.log(AMT.c[0]);\n\n    // Exit if the balance is zero.\n    if (balance <= 0.0) {\n      console.log(\"Balance of sending address is zero. Exiting.\");\n      process.exit(0);\n    }\n\n    // If the user fails to specify a reciever address, just send the BCH back\n    // to the origination address, so the example doesn't fail.\n    if (RECV_ADDR === \"\") RECV_ADDR = SEND_ADDR;\n\n    // Convert to a legacy address (needed to build transactions).\n    // const SEND_ADDR_LEGACY = bchjs.Address.toLegacyAddress(SEND_ADDR);\n    // const RECV_ADDR_LEGACY = bchjs.Address.toLegacyAddress(RECV_ADDR);\n\n    let masterHDNode;\n    const rootSeed = await bchjs.Mnemonic.toSeed(SEND_MNEMONIC);\n\n    // consider network during keygen\n    masterHDNode = bchjs.HDNode.fromSeed(rootSeed, NETWORK);\n\n    // HDNode of BIP44 account\n    const account = masterHDNode.derivePath(`m/44'/145'/0'/0/0`);\n\n    // derive the first external change address HDNode which is going to spend utxo\n    const cashAcc = bchjs.HDNode.toCashAddress(account);\n\n    const utxos = await bchjs.Electrumx.utxo(cashAcc);\n\n    if (utxos.utxos.length === 0) throw new Error(\"No UTXOs found.\");\n\n    // console.log(`u: ${JSON.stringify(u, null, 2)}`\n    // const utxo = await findBiggestUtxo(utxos.utxos);\n\n    // instance of transaction builder\n    let transactionBuilder;\n    if (NETWORK === \"mainnet\") {\n      transactionBuilder = new bchjs.TransactionBuilder();\n    } else transactionBuilder = new bchjs.TransactionBuilder(NETWORK);\n\n    // const SATOSHIS_TO_SEND = AMT.c[0];\n\n    // Essential variables of a transaction.\n    const satoshisToSend = AMT.c[0];\n    // const originalAmount = utxo.value;\n    // const vout = utxo.tx_pos;\n    // const txid = utxo.tx_hash;\n    let sendAmount = 0;\n    const inputs = [];\n\n    utxos.utxos.map((e) => {\n      const thisUtxo = e;\n\n      inputs.push(thisUtxo);\n\n      sendAmount += thisUtxo.value;\n\n      transactionBuilder.addInput(thisUtxo.tx_hash, thisUtxo.tx_pos);\n    });\n    const feeOptions = await getFee(SEND_ADDR);\n    const txFee = feeOptions.safe;\n    // const remainder = originalAmount - satoshisToSend - txFee;\n\n    if (sendAmount - txFee < 0) {\n      console.log(\n        \"Transaction fee costs more combined UTXOs. Can't send transaction.\"\n      );\n      return;\n    }\n    // add output w/ address and amount to send\n    transactionBuilder.addOutput(RECV_ADDR, satoshisToSend);\n    transactionBuilder.addOutput(\n      SEND_ADDR,\n      sendAmount - satoshisToSend - txFee\n    );\n\n    // Generate a change address from a Mnemonic of a private key.\n    const change = await changeAddrFromMnemonic(SEND_MNEMONIC);\n\n    // Generate a keypair from the change address.\n    const keyPair = bchjs.HDNode.toKeyPair(change);\n\n    // Sign the transaction with the HD node.\n    let redeemScript;\n    inputs.forEach((input, index) => {\n      transactionBuilder.sign(\n        index,\n        keyPair,\n        redeemScript,\n        transactionBuilder.hashTypes.SIGHASH_ALL,\n        input.value\n      );\n    });\n    // build tx\n    const tx = transactionBuilder.build();\n    // output rawhex\n    const hex = tx.toHex();\n    // console.log(`TX hex: ${hex}`);\n    console.log(\"hex\", hex);\n\n    // Broadcast transation to the network\n    const txidStr = await bchjs.RawTransactions.sendRawTransaction([hex]);\n    // import from util.js file\n    console.log(`Transaction ID: ${txidStr}`);\n    console.log(\"\");\n    return txidStr;\n  } catch (err) {\n    console.log(\"error: \", err);\n  }\n}\n\nexport async function getBchAccountBalance(account_address) {\n  //Fetch the BCH balance of the address\n  try {\n    console.log(\"Address from main page =\", account_address);\n    const bchjs = new BCHJS({ restURL: IS_DEV ? \"https://testnet3.fullstack.cash/v5/\" : \"https://bchn.fullstack.cash/v5/\" });\n    const balance = await bchjs.Electrumx.balance(account_address);\n\n    console.log(JSON.stringify(balance, null, 2));\n    // response format {balance: 0.1, balanceSat: 10000000, totalReceived: 0.1, totalReceivedSat: 10000000, totalSent: 0, …}\n    return toBCH(balance.balance.confirmed);\n  } catch (err) {\n    console.log(err);\n    return \"cannot compute\";\n  }\n}\n\n// function findBiggestUtxo(utxos) {\n//   let largestAmount = 0;\n//   let largestIndex = 0;\n\n//   for (var i = 0; i < utxos.length; i++) {\n//     const thisUtxo = utxos[i];\n\n//     if (thisUtxo.value > largestAmount) {\n//       largestAmount = thisUtxo.value;\n//       largestIndex = i;\n//     }\n//   }\n//\n//   return utxos[largestIndex];\n// }\n\nfunction changeAddrFromMnemonic(mnemonic) {\n  const bitbox = new BITBOX({ restURL: IS_DEV ? \"https://testnet3.fullstack.cash/v5/\" : \"https://bchn.fullstack.cash/v5/\" });\n  // root seed buffer\n  const rootSeed = bitbox.Mnemonic.toSeed(mnemonic);\n  const NETWORK = IS_DEV ? \"testnet\" : \"mainnet\";\n  // master HDNode\n  let masterHDNode;\n  // consider network during keygen\n  masterHDNode = bitbox.HDNode.fromSeed(rootSeed, NETWORK);\n\n  // HDNode of BIP44 account\n  const account = bitbox.HDNode.derivePath(masterHDNode, \"m/44'/145'/0'\");\n\n  // derive the first external change address HDNode which is going to spend utxo\n  const change = bitbox.HDNode.derivePath(account, \"0/0\");\n\n  return change;\n}\n\nexport const toBCH = (amount) => {\n  return new BigNumber(amount).dividedBy(1e8);\n};\n\n///senders public addr = cashAcc\nexport function getFee (cashAcc) {\n  return new Promise(async function (resolve, reject) {\n    try {\n      console.log('cash', cashAcc)\n      if(cashAcc === undefined){\n        resolve({\n          avg: 0,\n          fast: 0,\n          safe: 0,\n        })\n      }\n      let bchjs = new BCHJS({ restURL: IS_DEV ? \"https://testnet3.fullstack.cash/v5/\" : \"https://bchn.fullstack.cash/v5/\" })\n      const utxos = await bchjs.Electrumx.utxo(cashAcc)\n\n      const byteCount = bchjs.BitcoinCash.getByteCount(\n        { P2PKH: utxos.utxos.length },\n        { P2PKH: 2 }\n      )\n      console.log(`Transaction byte count: ${byteCount}`)\n      const satoshisPerByte = 2\n      const fee = Math.floor(satoshisPerByte * byteCount)\n      resolve({\n        avg: new BigNumber(fee).plus(100).toNumber(),\n        fast: new BigNumber(fee).plus(200).toNumber(),\n        safe: new BigNumber(fee).toNumber(),\n      })\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n","const network = \"testnet\";\nconst isDev = false;\n\nmodule.exports = {\n  network,\n  isDev,\n};\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Form, Button } from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Swal from \"sweetalert2\";\nimport { sendBch } from \"../functions/bch2\";\nimport { getBchAccountBalance } from \"../functions/bch2\";\n// import Spinner from \"react-bootstrap/Spinner\";\nimport { getFee } from \"../functions/bch2\";\n\nconst Bchwallet = () => {\n  const [raddress, setRaddress] = useState(\"\");\n  // const [isLoading, setIsLoading] = useState(false);\n  const [saddress, setSaddress] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [balance, setBalance] = useState(\"0\");\n  const [mnemonics, setMnemonic] = useState(\"\");\n  const [maxAmt, setMaxAmt] = useState(0);\n  useEffect(() => {\n    try {\n      const getBalance = async () => {\n        const balance = await getBchAccountBalance(saddress, false);\n        const fee = await getFee(saddress);\n        setMaxAmt((balance * 1e8 - fee.safe - 7000) / 1e8);\n        setBalance(balance.toString());\n        console.log(\"Here is the balance\", balance.toString());\n        console.log(\"Here is the fee\", fee.safe);\n\n      };\n      getBalance();\n\n    } catch (err) {\n      Swal.fire({\n        title: \"Failed!!!\",\n        text: err.message,\n        icon: \"error\",\n      });\n      setBalance(0);\n    }\n  }, [saddress]);\n\n  const handleSend = async (e) => {\n    console.log(\"amount\",amount);\n    let amount_to_transfer_trimmed = String(parseFloat(amount).toFixed(7));\n    const bal = await getBchAccountBalance(saddress);\n    let selbal = String(parseFloat(bal).toFixed(7));\n    e.preventDefault();\n    try {\n      console.log(\"address =\", raddress);\n      console.log(\"amount =\", amount);\n      console.log(\"mnemonics =\", mnemonics);\n      const txid = await sendBch(\n        saddress,\n        raddress,\n        amount_to_transfer_trimmed,\n        selbal,\n        mnemonics,\n      );\n      Swal.fire({\n        title: \"Sent!!!\",\n        text: \"Transaction successful.\",\n        icon: 'success',\n        html : `<a href=\"https://blockchair.com/bitcoin-cash/transaction/${txid}\" target=\"_blank\">View on Explorer</a>`\n      })\n    } catch {\n      Swal.fire({\n        title: \"Failed!!!\",\n        text: \"Transaction Failed.\",\n        icon: \"error\",\n      });\n    }\n    document.getElementById(\"form\").reset();\n  };\n  // const handleBalCheck = async (e) => {\n  //   e.preventDefault();\n  //   setIsLoading(true);\n  //   console.log(\"Bal check mnemonics =\", mnemonics);\n  //   try {\n  //     // const bal = await getBal(mnemonics);\n  //     const bal = await getBchAccountBalance(raddress);\n  //     console.log(\"bal =\", bal);\n  //     Swal.fire({\n  //       title: \"Balance\",\n  //       text: `Your balance is : ${bal} BCH`,\n  //       icon: \"success\",\n  //     });\n  //     setIsLoading(false);\n  //   } catch {\n  //     Swal.fire({\n  //       title: \"Failed!!!\",\n  //       text: \"Error getting Balance.\",\n  //       icon: \"warning\",\n  //     });\n  //   }\n  //   document.getElementById(\"bal-form\").reset();\n  // };\n  const handleMax = (e) => {\n    e.preventDefault();\n    try {\n      setAmount(maxAmt);\n      document.getElementById(\"amount\").value = maxAmt;\n      console.log(\"maxAmt =\", maxAmt);\n    } catch {\n      console.log(\"Error setting max amount\");\n    }\n  };\n  return (\n    <>\n      <Wrapper>\n        <FormWrapper>\n          <Card border=\"primary\" style={{ width: \"36rem\" }}>\n            <Card.Body>\n              <Card.Title>\n                {\" \"}\n                <h1>Wallet Pay</h1>\n              </Card.Title>\n              <Card.Text>\n                Send BCH to any address.\n              </Card.Text>\n            </Card.Body>\n            <ListGroup className=\"list-group-flush\">\n              <Form id=\"form\">\n                <FormControl>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Sender's Address\"\n                    size=\"sm\"\n                    name=\"Receiver's Address\"\n                    onChange={(e) => setSaddress(e.target.value)}\n                  />\n                </FormControl>\n                <br />\n                <ListGroup.Item>Balance: {balance}</ListGroup.Item>\n                <br />\n                <FormControl>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Receiver's Address\"\n                    size=\"sm\"\n                    name=\"Receiver's Address\"\n                    onChange={(e) => setRaddress(e.target.value)}\n                  />\n                </FormControl>\n                <br />\n                <FormControl>\n                  <Form.Control\n                    type=\"number\"\n                    placeholder=\"Amount to Send\"\n                    size=\"sm\"\n                    name=\"Amount\"\n                    onChange={(e) => setAmount(e.target.value)}\n                    value={amount}\n                    id=\"amount\"\n                  />\n                </FormControl>\n                <br />\n                <ButtonSend\n                  variant=\"light\"\n                  onClick={handleMax}\n                  size=\"sm\"\n                  style={{ marginBottom: \"10px\" }}\n                >\n                  Send Max\n                </ButtonSend>\n                <br />\n                <FormControl>\n                  <Form.Control\n                    type=\"textarea\"\n                    placeholder=\"Mnemonics\"\n                    size=\"sm\"\n                    name=\"Mnemonics\"\n                    onChange={(e) => setMnemonic(e.target.value)}\n                  />\n                </FormControl>\n                <ButtonControl>\n                  <ButtonSend variant=\"dark\" onClick={handleSend} size=\"sm\">\n                    Send\n                  </ButtonSend>\n                  <br />\n                </ButtonControl>\n              </Form>\n            </ListGroup>\n            <Card.Body>\n            </Card.Body>\n          </Card>\n        </FormWrapper>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Bchwallet;\n\nconst Wrapper = styled.div`\n  padding: 30px 0px;\n  display: flex;\n  flex-direction: row;\n  @media (max-width: 768px) {\n    padding: 0;\n    margin: 0;\n  }\n  input::placeholder,\n  textarea::placeholder {\n    color: rgb(221, 221, 221);\n  }\n`;\n\nconst FormWrapper = styled.div`\n  margin: auto;\n  padding: 20px;\n  border: 3px solid #000000;\n  border-radius: 10px;\n`;\n\nconst FormControl = styled.div`\n  margin: auto;\n  text-align: center;\n  border: 1px solid #113d8a;\n  box-sizing: border-box;\n  border-radius: 5px;\n  input[type=\"number\"]::-webkit-outer-spin-button,\n  input[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  input[type=\"number\"] {\n    -moz-appearance: none;\n  }\n  > input {\n    border-radius: 5px;\n    font-size: 16px;\n    padding: 10px 15px;\n    border: none;\n  }\n  > textarea {\n    resize: none;\n    border-radius: 5px;\n    font-size: 16px;\n    padding: 10px 15px;\n    width: 100%;\n    height: 287px;\n  }\n`;\n\n// const FormControlArea = styled.div`\n//   margin: auto;\n//   height: 100px;\n//   text-align: center;\n//   border: 1px solid #113d8a;\n//   box-sizing: border-box;\n//   border-radius: 5px;\n//   input[type=\"number\"]::-webkit-outer-spin-button,\n//   input[type=\"number\"]::-webkit-inner-spin-button {\n//     -webkit-appearance: none;\n//     margin: 0;\n//   }\n//   input[type=\"number\"] {\n//     -moz-appearance: none;\n//   }\n//   > input {\n//     border-radius: 5px;\n//     font-size: 16px;\n//     padding: 10px 15px;\n//     border: none;\n//   }\n//   > textarea {\n//     resize: none;\n//     border-radius: 5px;\n//     font-size: 16px;\n//     padding: 10px 15px;\n//     width: 100%;\n//     height: 287px;\n//   }\n// `;\n\nconst ButtonControl = styled.div`\n  padding-top: 30px;\n  padding-bottom: 40px;\n  text-align: center;\n  @media (max-width: 768px) {\n    text-align: center;\n    padding-top: 10px;\n  }\n`;\nconst ButtonSend = styled(Button)`\n  padding: 10px 45px;\n  border-radius: 10px;\n  color: #ffffff;\n  border: none;\n  background: #1240c2;\n  text-align: center;\n  @media (max-width: 768px) {\n    margin: 50px 0;\n  }\n  :hover {\n    color: pink;\n  }\n`;\n","import \"./App.css\";\nimport Bchwallet from \"./screens/bchwallet\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Bchwallet />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}